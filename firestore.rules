/**
 * @file Firestore Security Rules for Zimmah Digital Vault
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and allows public read access where explicitly intended.
 * @data_structure Data is organized hierarchically under `/users/{userId}`, with subcollections for qarzs, amanats, wasiyats, and notifications.
 * @key_security_decisions User listing is disallowed. Write access is strictly controlled via ownership checks. Denormalization is used to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }
    
    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @deny (update) User with UID 'user456' cannot update user profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete user profile at /users/user123.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines security rules for debt records (Qarz) under a specific user.
     * @path /users/{userId}/qarzs/{qarzId}
     * @allow (create) User with UID 'user123' can create a qarz under /users/user123/qarzs/qarz001 if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read qarz at /users/user123/qarzs/qarz001 if request.auth.uid == 'user123'.
     * @allow (list) User with UID 'user123' can list qarzs under /users/user123 if request.auth.uid == 'user123'.
     * @deny (update) User with UID 'user456' cannot update qarz at /users/user123/qarzs/qarz001.
     * @deny (delete) User with UID 'user456' cannot delete qarz at /users/user123/qarzs/qarz001.
     * @principle Enforces document ownership for writes and restricts read and list access to the owner.
     */
    match /users/{userId}/qarzs/{qarzId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == userId;
      allow update: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines security rules for entrusted items (Amanat) under a specific user.
     * @path /users/{userId}/amanats/{amanatId}
     * @allow (create) User with UID 'user123' can create an amanat under /users/user123/amanats/amanat001 if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read amanat at /users/user123/amanats/amanat001 if request.auth.uid == 'user123'.
     * @allow (list) User with UID 'user123' can list amanats under /users/user123 if request.auth.uid == 'user123'.
     * @deny (update) User with UID 'user456' cannot update amanat at /users/user123/amanats/amanat001.
     * @deny (delete) User with UID 'user456' cannot delete amanat at /users/user123/amanats/amanat001.
     * @principle Enforces document ownership for writes and restricts read and list access to the owner.
     */
    match /users/{userId}/amanats/{amanatId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == userId;
      allow update: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines security rules for wills (Wasiyat) under a specific user.
     * @path /users/{userId}/wasiyats/{wasiyatId}
     * @allow (create) User with UID 'user123' can create a wasiyat under /users/user123/wasiyats/wasiyat001 if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read wasiyat at /users/user123/wasiyats/wasiyat001 if request.auth.uid == 'user123'.
     * @allow (list) User with UID 'user123' can list wasiyats under /users/user123 if request.auth.uid == 'user123'.
     * @deny (update) User with UID 'user456' cannot update wasiyat at /users/user123/wasiyats/wasiyat001.
     * @deny (delete) User with UID 'user456' cannot delete wasiyat at /users/user123/wasiyats/wasiyat001.
     * @principle Enforces document ownership for writes and restricts read and list access to the owner.
     */
    match /users/{userId}/wasiyats/{wasiyatId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == userId;
      allow update: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines security rules for notifications under a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user123' can create a notification under /users/user123/notifications/notification001 if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read notification at /users/user123/notifications/notification001 if request.auth.uid == 'user123'.
     * @allow (list) User with UID 'user123' can list notifications under /users/user123 if request.auth.uid == 'user123'.
     * @deny (update) User with UID 'user456' cannot update notification at /users/user123/notifications/notification001.
     * @deny (delete) User with UID 'user456' cannot delete notification at /users/user123/notifications/notification001.
     * @principle Enforces document ownership for writes and restricts read and list access to the owner.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == userId;
      allow update: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Missing from the data model.
     * @path /users/{userId}/witnesses/{witnessId}
     * @allow (get) User with UID 'user123' can read witness at /users/user123/witnesses/witness001 if request.auth.uid == 'user123'.
     * @allow (list) User with UID 'user123' can list witnesses under /users/user123 if request.auth.uid == 'user123'.
     * @principle Enforces document ownership for writes and restricts read and list access to the owner.
     */
    match /users/{userId}/witnesses/{witnessId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerId == userId;
      allow update: if isOwner(userId) && request.resource.data.ownerId == userId;
      allow delete: if isOwner(userId);
    }
  }
}