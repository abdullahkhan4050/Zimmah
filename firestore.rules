/**
 * @fileoverview Firestore Security Rules for Zimmah Digital Vault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access their own data unless explicitly granted other permissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/qarzs/{qarzId}: Stores debt records (Qarz) associated with a specific user (debtor).
 * - /users/{userId}/amanats/{amanatId}: Stores entrusted item records (Amanat) associated with a specific user.
 * - /users/{userId}/wasiyats/{wasiyatId}: Stores will records (Wasiyat) associated with a specific user.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications associated with a specific user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user document.
 * - All subcollections under /users/{userId} follow the ownership pattern, where the
 *   'userId' in the path must match the authenticated user's UID.
 * - Listing of any collection is only allowed for the owner.
 *
 * Denormalization for Authorization:
 * The data model is structured such that authorization checks can be performed
 * directly on the documents being accessed, without requiring additional `get()`
 * calls. For example, Qarz, Amanat, Wasiyat, and Notification documents are stored
 * under the respective user's path, allowing for easy ownership checks.
 *
 * Structural Segregation:
 * Private user data is stored under the /users/{userId} path, ensuring that it is
 * only accessible to the authenticated user. This segregation simplifies the
 * security rules and prevents accidental exposure of sensitive information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) User with matching UID can read their profile.
     * @allow (update) User with matching UID can update their profile.
     * @allow (delete) User with matching UID can delete their profile.
     * @deny (create) User trying to create a profile with a mismatched UID.
     * @deny (update) User trying to update another user's profile.
     * @deny (delete) User trying to delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to debt records (Qarz) for a specific user.
     * @path /users/{userId}/qarzs/{qarzId}
     * @allow (create) User with matching UID can create a debt record under their profile.
     * @allow (get) User with matching UID can read a debt record under their profile.
     * @allow (update) User with matching UID can update a debt record under their profile.
     * @allow (delete) User with matching UID can delete a debt record under their profile.
     * @deny (create) User trying to create a debt record with a mismatched UID.
     * @deny (update) User trying to update a debt record under another user's profile.
     * @deny (delete) User trying to delete a debt record under another user's profile.
     * @principle Enforces document ownership for debt records.
     */
    match /users/{userId}/qarzs/{qarzId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to entrusted item records (Amanat) for a specific user.
     * @path /users/{userId}/amanats/{amanatId}
     * @allow (create) User with matching UID can create an amanat record under their profile.
     * @allow (get) User with matching UID can read an amanat record under their profile.
     * @allow (update) User with matching UID can update an amanat record under their profile.
     * @allow (delete) User with matching UID can delete an amanat record under their profile.
     * @deny (create) User trying to create an amanat record with a mismatched UID.
     * @deny (update) User trying to update an amanat record under another user's profile.
     * @deny (delete) User trying to delete an amanat record under another user's profile.
     * @principle Enforces document ownership for amanat records.
     */
    match /users/{userId}/amanats/{amanatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to will records (Wasiyat) for a specific user.
     * @path /users/{userId}/wasiyats/{wasiyatId}
     * @allow (create) User with matching UID can create a wasiyat record under their profile.
     * @allow (get) User with matching UID can read a wasiyat record under their profile.
     * @allow (update) User with matching UID can update a wasiyat record under their profile.
     * @allow (delete) User with matching UID can delete a wasiyat record under their profile.
     * @deny (create) User trying to create a wasiyat record with a mismatched UID.
     * @deny (update) User trying to update a wasiyat record under another user's profile.
     * @deny (delete) User trying to delete a wasiyat record under another user's profile.
     * @principle Enforces document ownership for wasiyat records.
     */
    match /users/{userId}/wasiyats/{wasiyatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notification records for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with matching UID can create a notification record under their profile.
     * @allow (get) User with matching UID can read a notification record under their profile.
     * @allow (update) User with matching UID can update a notification record under their profile.
     * @allow (delete) User with matching UID can delete a notification record under their profile.
     * @deny (create) User trying to create a notification record with a mismatched UID.
     * @deny (update) User trying to update a notification record under another user's profile.
     * @deny (delete) User trying to delete a notification record under another user's profile.
     * @principle Enforces document ownership for notification records.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}