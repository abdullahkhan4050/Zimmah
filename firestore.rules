/**
 * @fileoverview Firestore Security Rules for Zimmah Digital Vault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership. Each user's data includes
 * qarzs, amanats, wasiyats, and notifications.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user document.
 * - All subcollections under /users/{userId} (qarzs, amanats, wasiyats, notifications)
 *   are strictly accessible only to the owner (the user with the matching userId).
 * - Listing collections is only allowed for the owner of user-scoped subcollections.
 *
 * Denormalization for Authorization:
 * The 'userId' is present in the document path and, for create operations, is validated
 * against the authenticated user's UID.
 *
 * Structural Segregation:
 * User-specific data is stored in separate subcollections under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of the resource and the resource exists
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) Any signed-in user can read a user profile.
     * @allow (update) User with matching UID can update their profile.
     * @allow (delete) User with matching UID can delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update) User cannot update a profile with a mismatched UID.
     * @deny (delete) User cannot delete a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Qarz (debt) records for a specific user.
     * @path /users/{userId}/qarzs/{qarzId}
     * @allow (create) User with matching UID can create a Qarz record under their profile.
     * @allow (get) User with matching UID can read their Qarz records.
     * @allow (list) User with matching UID can list their Qarz records.
     * @allow (update) User with matching UID can update their Qarz records.
     * @allow (delete) User with matching UID can delete their Qarz records.
     * @deny (create) User cannot create a Qarz record with a mismatched UID.
     * @deny (update) User cannot update a Qarz record with a mismatched UID.
     * @deny (delete) User cannot delete a Qarz record with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/qarzs/{qarzId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Amanat (entrusted item) records for a specific user.
     * @path /users/{userId}/amanats/{amanatId}
     * @allow (create) User with matching UID can create an Amanat record under their profile.
     * @allow (get) User with matching UID can read their Amanat records.
     * @allow (list) User with matching UID can list their Amanat records.
     * @allow (update) User with matching UID can update their Amanat records.
     * @allow (delete) User with matching UID can delete their Amanat records.
     * @deny (create) User cannot create an Amanat record with a mismatched UID.
     * @deny (update) User cannot update an Amanat record with a mismatched UID.
     * @deny (delete) User cannot delete an Amanat record with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/amanats/{amanatId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Wasiyat (will) records for a specific user.
     * @path /users/{userId}/wasiyats/{wasiyatId}
     * @allow (create) User with matching UID can create a Wasiyat record under their profile.
     * @allow (get) User with matching UID can read their Wasiyat records.
     * @allow (list) User with matching UID can list their Wasiyat records.
     * @allow (update) User with matching UID can update their Wasiyat records.
     * @allow (delete) User with matching UID can delete their Wasiyat records.
     * @deny (create) User cannot create a Wasiyat record with a mismatched UID.
     * @deny (update) User cannot update a Wasiyat record with a mismatched UID.
     * @deny (delete) User cannot delete a Wasiyat record with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/wasiyats/{wasiyatId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Notification records for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with matching UID can create a Notification record under their profile.
     * @allow (get) User with matching UID can read their Notification records.
     * @allow (list) User with matching UID can list their Notification records.
     * @allow (update) User with matching UID can update their Notification records.
     * @allow (delete) User with matching UID can delete their Notification records.
     * @deny (create) User cannot create a Notification record with a mismatched UID.
     * @deny (update) User cannot update a Notification record with a mismatched UID.
     * @deny (delete) User cannot delete a Notification record with a mismatched UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}